{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-nodeunit/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_nodeunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-nodeunit/lib.npmtest_grunt_contrib_nodeunit.js":"/* istanbul instrument in package npmtest_grunt_contrib_nodeunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_nodeunit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_nodeunit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-nodeunit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-nodeunit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_nodeunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_nodeunit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_nodeunit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_nodeunit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_nodeunit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_nodeunit.__dirname + '/lib.npmtest_grunt_contrib_nodeunit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-nodeunit/node_modules/grunt-contrib-nodeunit/tasks/nodeunit.js":"/*\n * grunt-contrib-nodeunit\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Nodejs libs.\n  var path = require('path');\n  var util = require('util');\n  var fs = require('fs');\n\n  // External libs.\n  var nodeunit = require('nodeunit');\n\n  function hook_stdout(callback) {\n    var oldWrite = process.stdout.write;\n\n    process.stdout.write = (function() {\n      return function(string, encoding, fd) {\n        //write.apply(process.stdout, arguments)\n        callback(string, encoding, fd);\n      };\n    })(process.stdout.write);\n\n    return function() {\n      process.stdout.write = oldWrite;\n    };\n  }\n\n  // ==========================================================================\n  // BETTER ERROR DISPLAY\n  // ==========================================================================\n\n  // Much nicer error formatting than what comes with nodeunit.\n  var betterErrors = function (assertion) {\n    var e = assertion.error;\n    if (!e || !('actual' in e) || !('expected' in e)) {\n      return assertion;\n    }\n\n    // Temporarily override the global \"inspect\" property because logging\n    // the entire global object is just silly.\n    var globalInspect = global.inspect;\n    global.inspect = function() {\n      return '[object global]';\n    };\n\n    e._message = e.message;\n\n    // Pretty-formatted objects.\n    var actual = util.inspect(e.actual, { depth: 10, colors: true });\n    var expected = util.inspect(e.expected, { depth: 10, colors: true });\n\n    var indent = function(str) {\n      return ('' + str).split('\\n').map(function(s) { return '  ' + s; }).join('\\n');\n    };\n\n    var stack;\n    var multiline = (actual + expected).indexOf('\\n') !== -1;\n    if (multiline) {\n      stack = [\n        'Actual:', indent(actual),\n        'Operator:', indent(e.operator),\n        'Expected:', indent(expected)\n      ].join('\\n');\n    } else {\n      stack = e.name + ': ' + actual + ' ' + e.operator + ' ' + expected;\n    }\n\n    if (e.stack) {\n      stack += '\\n' + e.stack.split('\\n').slice(1).join('\\n');\n    }\n\n    e.stack = stack;\n\n    // Restore the global \"inspect\" property.\n    global.inspect = globalInspect;\n    return assertion;\n  };\n\n  // Reformat stack trace to remove nodeunit scripts, fix indentation, etc.\n  var cleanStack = function(error) {\n    error._stack = error.stack;\n    // Show a full stack trace?\n    var fullStack = grunt.option('verbose') || grunt.option('stack');\n    // Reformat stack trace output.\n    error.stack = error.stack.split('\\n').map(function(line) {\n      if (line[0] === ' ') {\n        // Remove nodeunit script srcs from non-verbose stack trace.\n        if (!fullStack && line.indexOf(path.join('node_modules', 'nodeunit') + path.sep) !== -1) {\n          return '';\n        }\n        // Remove leading spaces.\n        line = line.replace(/^ {4}(?=at)/, '');\n        // Remove cwd.\n        line = line.replace('(' + process.cwd() + path.sep, '(');\n      } else {\n        line = line.replace(/Assertion(Error)/, '$1');\n      }\n      return line + '\\n';\n    }).join('');\n\n    return error;\n  };\n\n  // ==========================================================================\n  // CUSTOM NODEUNIT REPORTER\n  // ==========================================================================\n\n  // Keep track of the last-started module.\n  var currentModule;\n  // Keep track of the last-started test(s).\n  var unfinished = {};\n\n  // If Nodeunit explodes because a test was missing test.done(), handle it.\n  process.on('exit', function() {\n    var len = Object.keys(unfinished).length;\n    // If there are unfinished tests, tell the user why Nodeunit killed grunt.\n    if (len > 0) {\n      grunt.log.muted = false;\n      grunt.verbose.error().or.writeln('F'.red);\n      grunt.log.error('Incomplete tests/setups/teardowns:');\n      Object.keys(unfinished).forEach(grunt.log.error, grunt.log);\n      grunt.fatal('A test was missing test.done(), so nodeunit exploded. Sorry!',\n        Math.min(99, 90 + len));\n    }\n  });\n\n  // Keep track of failed assertions for pretty-printing.\n  var failedAssertions = [];\n  function logFailedAssertions() {\n    var assertion;\n    // Print each assertion error + stack.\n    while (assertion = failedAssertions.shift()) {\n      betterErrors(assertion);\n      cleanStack(assertion.error);\n      grunt.verbose.or.error(assertion.testName);\n      if (assertion.error.name === 'AssertionError' && assertion.message) {\n        grunt.log.error('Message: ' + assertion.message.magenta);\n      }\n      grunt.log.error(assertion.error.stack).writeln();\n    }\n  }\n\n  // Define our own Nodeunit reporter.\n  nodeunit.reporters.grunt = {\n    info: 'Grunt reporter',\n    run: function(files, options, callback) {\n      var opts = {\n        // No idea.\n        testspec: undefined,\n        // Executed when the first test in a file is run. If no tests exist in\n        // the file, this doesn't execute.\n        moduleStart: function(name) {\n          // Keep track of this so that moduleDone output can be suppressed in\n          // cases where a test file contains no tests.\n          currentModule = name;\n          grunt.verbose.subhead('Testing ' + name).or.write('Testing ' + name);\n        },\n        // Executed after a file is done being processed. This executes whether\n        // tests exist in the file or not.\n        moduleDone: function(name) {\n          // Abort if no tests actually ran.\n          if (name !== currentModule) {\n            return;\n          }\n          // Print assertion errors here, if verbose mode is disabled.\n          if (!grunt.option('verbose')) {\n            if (failedAssertions.length > 0) {\n              grunt.log.writeln();\n              logFailedAssertions();\n            } else {\n              grunt.log.ok();\n            }\n          }\n        },\n        // Executed before each test is run.\n        testStart: function(name) {\n          // Keep track of the current test, in case test.done() was omitted\n          // and Nodeunit explodes.\n          unfinished[name] = name;\n          grunt.verbose.write(name + '...');\n          // Mute output, in cases where a function being tested logs through\n          // grunt (for testing grunt internals).\n          grunt.log.muted = true;\n        },\n        // Executed after each test and all its assertions are run.\n        testDone: function(name, assertions) {\n          delete unfinished[name];\n          // Un-mute output.\n          grunt.log.muted = false;\n          // Log errors if necessary, otherwise success.\n          if (assertions.failures()) {\n            assertions.forEach(function(ass) {\n              if (ass.failed()) {\n                ass.testName = name;\n                failedAssertions.push(ass);\n              }\n            });\n            if (grunt.option('verbose')) {\n              grunt.log.error();\n              logFailedAssertions();\n            } else {\n              grunt.log.write('F'.red);\n            }\n          } else {\n            grunt.verbose.ok().or.write('.');\n          }\n        },\n        // Executed when everything is all done.\n        done: function (assertions) {\n          if (assertions.failures()) {\n            grunt.warn(assertions.failures() + '/' + assertions.length +\n              ' assertions failed (' + assertions.duration + 'ms)');\n          } else if (assertions.length === 0) {\n            grunt.warn('0/0 assertions ran (' + assertions.duration + 'ms)');\n          } else {\n            grunt.verbose.writeln();\n            grunt.log.ok(assertions.length + ' assertions passed (' +\n              assertions.duration + 'ms)');\n          }\n          // Tell the task manager we're all done.\n          callback(); // callback(assertions.failures() === 0);\n        }\n      };\n\n      // Nodeunit needs absolute paths.\n      var paths = files.map(function(filepath) {\n        return path.resolve(filepath);\n      });\n      nodeunit.runFiles(paths, opts);\n    }\n  };\n\n  // ==========================================================================\n  // TASKS\n  // ==========================================================================\n\n  grunt.registerMultiTask('nodeunit', 'Run Nodeunit unit tests.', function() {\n    var done = this.async();\n\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      reporterOutput: false,\n      reporter: 'grunt',\n      reporterOptions: {}\n    });\n\n    // Ensure the default nodeunit options are set by reading in the nodeunit.json file.\n    var nodeUnitDefaults = {};\n\n    // check for nodeunit under our package's node_modules directory first\n    var nodeUnitDefaultsFile = path.join(__dirname, '..', 'node_modules', 'nodeunit', 'bin', 'nodeunit.json');\n\n    if (!fs.existsSync(nodeUnitDefaultsFile)) {\n      // if both grunt-contrib-nodeunit and nodeunit are listed as dependencies for this project, they'd\n      // be located at the same folder level.  So check for that location next.\n      nodeUnitDefaultsFile = path.join(__dirname, '..', '..', 'nodeunit', 'bin', 'nodeunit.json');\n    }\n\n    if (fs.existsSync(nodeUnitDefaultsFile)) {\n      nodeUnitDefaults = JSON.parse(fs.readFileSync(nodeUnitDefaultsFile, 'utf8'));\n    }\n\n    for (var defaultVal in nodeUnitDefaults) {\n      if (typeof options.reporterOptions[defaultVal] === 'undefined') {\n        options.reporterOptions[defaultVal] = nodeUnitDefaults[defaultVal];\n      }\n    }\n\n    if (!nodeunit.reporters[options.reporter]) {\n      return done(new Error('Reporter ' + options.reporter + ' not found'));\n    }\n\n    var output = '';\n\n    if (options.reporterOutput) {\n      // Hook into stdout to capture report\n      var unhook = hook_stdout(function(string) {\n        output += string;\n        return '';\n      });\n    }\n\n    // if reporterOutput has a directory destination make sure to create it.\n    // See: https://github.com/caolan/nodeunit/issues/262\n    if (options.reporterOptions.output) {\n      grunt.file.mkdir(path.normalize(options.reporterOptions.output));\n    }\n\n    // Run test(s).\n    nodeunit.reporters[options.reporter].run(this.filesSrc, options.reporterOptions, function(err) {\n      // Write the output of the reporter if wanted\n      if (options.reporterOutput) {\n        // no longer hook stdout so we can grunt.log\n        if (unhook) {\n          unhook();\n        }\n\n        // save all of the output we saw up to this point\n        grunt.file.write(options.reporterOutput, output);\n\n        grunt.log.ok('Report \"' + options.reporterOutput + '\" created.');\n      }\n\n      done(err);\n    });\n  });\n\n};\n"}